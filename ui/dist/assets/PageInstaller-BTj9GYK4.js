import{p as Z,a as ee,r as y,s,m as d,g as ae,b,c as te,t as se,d as e,l as re,e as ie,i as le,F as ne,f as $,h as q,j as i,k as oe,n as F,o as A,q as U,u as I,v as T,w as P,x as W,y as H,z as ue,A as de,B as ce,C as pe,D as fe,E as h,G as B}from"./index-BmQnWgn7.js";var be=$('<label>Email</label> <input type="email" autocomplete="off" required/>',1),me=$('<label>Password</label> <input type="password" autocomplete="new-password" minlength="10" required/> <div class="help-block">Recommended at least 10 characters.</div>',1),he=$('<label>Password confirm</label> <input type="password" minlength="10" required/>',1),_e=$('<form class="block" autocomplete="off"><div class="content txt-center m-b-base"><h4>Create your first superuser account in order to continue</h4></div> <!> <!> <!> <button type="submit"><span class="txt">Create superuser and login</span> <i class="ri-arrow-right-line"></i></button></form> <hr/>  <label for="backupFileInput"><i class="ri-upload-cloud-line"></i> <span class="txt">Or initialize from backup</span></label> <input id="backupFileInput" type="file" class="hidden" accept=".zip"/>',1);function ke(J,D){Z(D,!1);const l=d();let m=ee(D,"params",8),k=d(""),w=d(""),x=d(""),c=d(!1),_=d(!1),z=d(),v=d();M();async function M(){if(!m()?.token)return y("/");s(c,!0);try{const a=ae(m()?.token);await b.collection("_superusers").getOne(a.id,{requestKey:"installer_token_check",headers:{Authorization:m()?.token}})}catch(a){a?.isAbort||(te("The installer token is invalid or has expired."),y("/"))}s(c,!1),await se(),e(z)?.focus()}async function Q(){if(!e(l)){s(c,!0);try{await b.collection("_superusers").create({email:e(k),password:e(w),passwordConfirm:e(x)},{headers:{Authorization:m()?.token}}),await b.collection("_superusers").authWithPassword(e(k),e(w)),y("/")}catch(a){b.error(a)}s(c,!1)}}function E(){e(v)&&fe(v,e(v).value="")}function V(a){a&&ce(`Note that we don't perform validations for the uploaded backup files. Proceed with caution and only if you trust the file source.

Do you really want to upload and initialize "${a.name}"?`,()=>{X(a)},()=>{E()})}async function X(a){if(!(!a||e(l))){s(_,!0);try{await b.backups.upload({file:a},{headers:{Authorization:m()?.token}}),await b.backups.restore(a.name,{headers:{Authorization:m()?.token}}),pe("Please wait while extracting the uploaded archive!"),await new Promise(g=>setTimeout(g,2e3)),y("/")}catch(g){b.error(g)}E(),s(_,!1)}}re(()=>(e(c),e(_)),()=>{s(l,e(c)||e(_))}),ie(),le(),ne(J,{children:(a,g)=>{var O=_e(),C=q(O),j=i(oe(C),2);F(j,{class:"form-field required",name:"email",children:A,$$slots:{default:(r,p)=>{const n=B(()=>p.uniqueId);var o=be(),u=q(o),t=i(u,2);U(t,f=>s(z,f),()=>e(z)),I(()=>{h(u,"for",e(n)),h(t,"id",e(n)),t.disabled=e(l)}),T(t,()=>e(k),f=>s(k,f)),P(r,o)}}});var G=i(j,2);F(G,{class:"form-field required",name:"password",children:A,$$slots:{default:(r,p)=>{const n=B(()=>p.uniqueId);var o=me(),u=q(o),t=i(u,2);I(()=>{h(u,"for",e(n)),h(t,"id",e(n)),t.disabled=e(l)}),T(t,()=>e(w),f=>s(w,f)),P(r,o)}}});var K=i(G,2);F(K,{class:"form-field required",name:"passwordConfirm",children:A,$$slots:{default:(r,p)=>{const n=B(()=>p.uniqueId);var o=he(),u=q(o),t=i(u,2);I(()=>{h(u,"for",e(n)),h(t,"id",e(n)),t.disabled=e(l)}),T(t,()=>e(x),f=>s(x,f)),P(r,o)}}});var Y=i(K,2);let L;var N=i(C,4);let R;var S=i(N,2);U(S,r=>s(v,r),()=>e(v)),I((r,p)=>{L=W(Y,1,"btn btn-lg btn-block btn-next",null,L,r),R=W(N,1,"btn btn-lg btn-hint btn-transparent btn-block",null,R,p)},[()=>({"btn-disabled":e(l),"btn-loading":e(c)}),()=>({"btn-disabled":e(l),"btn-loading":e(_)})]),H("submit",C,ue(Q)),H("change",S,r=>{V(r.target?.files?.[0])}),P(a,O)},$$slots:{default:!0}}),de()}export{ke as default};
